// Generated by CoffeeScript 1.7.1
(function() {
  var browserConsole, browserMethod, console, ioslogging, method, name, util, _fn,
    __slice = [].slice;

  util = require('util');

  ioslogging = process.binding('ioslogging');

  console = {
    log: function() {
      return ioslogging.logInfo(util.format.apply(util, arguments));
    },
    error: function() {
      return ioslogging.logError("[error] " + util.format.apply(util, arguments));
    },
    warn: function() {
      return ioslogging.logWarning("[warn] " + util.format.apply(util, arguments));
    },
    info: function() {
      return ioslogging.logInfo("[info] " + util.format.apply(util, arguments));
    },
    debug: function() {
      return ioslogging.logDebug("[debug] " + util.format.apply(util, arguments));
    },
    verbose: function() {
      return ioslogging.logVerbose("[verbose] " + util.format.apply(util, arguments));
    },
    dir: function(object) {
      return ioslogging.logInfo(util.inspect(object, {
        customInspect: false
      }) + '\n');
    },
    assert: function() {
      var args, expression;
      expression = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!expression) {
        return require('assert').ok(false, util.format.apply(util, args));
      }
    }
  };

  if ((global.console != null) && global.console !== module.exports) {
    browserConsole = global.console;
    _fn = function(method, browserMethod) {
      return browserConsole[name] = function() {
        var result;
        result = browserMethod.apply(browserConsole, arguments);
        method.apply(console, arguments);
        return result;
      };
    };
    for (name in console) {
      method = console[name];
      browserMethod = browserConsole[name];
      _fn(method, browserMethod);
    }
    console = browserConsole;
  }

  module.exports = console;

}).call(this);
